* TODO
* Start report (NO)
* Profiling 
+ profile R (AK)
+ profile valgrind (NO) 
+ Baseline profiling (AK)  
* Easy solutions with omp critical
+ omp critical -> omp atomic write/update? (AK)
+ profile again
* Misc tests
+ change from dynamic to static
+ if keep critical consider naming them (possible speedup) (AK)
+ what does nowait do? speedup? (NO)
* Reporting structure improvements
+ Can summary$pt and summary$prev be merged?
  $prev and $pt are almost identical $pt allocates patient-time
  whereas $prev allocates number of individuals, all other
  columns are identical and their sizes seems to be very
  similar. !suggest a single structure with one more column.


> tmp <- callFhcrc(n=1e6) \\
   user  system elapsed   \\
 40.731   0.041  10.695   \\
> dim(tmp$summary$pt)     \\
    122175      8         \\ 
> dim(tmp$summary$prev)   \\   
    116545      8         \\  

+ $events has one more factor, $event - the event type and does not fit
  in that structure.

+ Could the dynamic mapping be changed for a static sparse
  structure? According to the table below it would be 432000x8
  matrix. The sparsity would result in overhead (and look bad if not
  post-processed) with small simulations, but the static allocation
  could save overhead for large simulations (when it is needed).
  

|-------+-------+----+-----+-------------+-----+------------------------|
| state | grade | dx | psa | cohort      | age | number of combinations |
|-------+-------+----+-----+-------------+-----+------------------------|
|     3 |     3 |  3 |   2 | (1980-1900) | 100 | 432 000                |
|-------+-------+----+-----+-------------+-----+------------------------|

+ A consequence of using a static structure maybe that openMP's
  reduction() could be used. After a quick web search: it looks like it
  does not operate directly on arrays.

* Start testing on Povel
* Optimizing flags / compilers
* MPI? (if so on R-side, or?)
* Instructions
** Build & compile
Howto install and compile the R-package:

=https://github.com/mclements/microsimulation=

=shell: git clone https://github.com/mclements/microsimulation.git=

=R: install.packages(“BH”)=

=R: install.packages(“Rcpp”)=

=shell: R CMD INSTALL path_to_microsimulation=

*** Makevars
On Ferlin, the gcc compiler used for R is 4.6.0, which only has
expereminetal support for C++11 standard. The flag to provide is
-std=c++0x in lieu of -std=c++11.

** Project instructions from PDC
*** For some application and HPC architecture of your choice:
+ Develop efficient program for non-trivial problem
+ Demonstrate and report how efficient it is.
+ 4.5 ECTS = 3 weeks of work incl. report writing
*** The project is not about:
+ Substantial development of new code.
+ Scientific results obtained with code
*** So:
+ Prioritize measurements and analysis/interpretation!
+ Demonstrate use of tools (profiling, ...) , and simple performance model.
+ NO TIME for development of new significant code.
*** Examples:
+ Parallelize a code you know and/or work with; choose interesting part.
+ Write a simple code for key algorithm of bigger solution process
+ Write a simple code for a simple problem
*** After the course
+ Start the work ASAP:
+ Finish the work; Get in touch with tutor
+ Submit report to tutor.
  The report will be graded and sent back with comments; you may have to complete some parts and hand in again. We need email and paper mail address!
+ KTH students: LADOK
+ Other students: Certificate will be sent to you
*** Now - during lab-afternoons
+ Discuss with instructors \& course participants, form groups of size G.
+ Define project and choose tutor: Michael, Jonathan, Erwin, Stefano
+ Write very short synopsis, check with supervisor
+ Submit synopsis to summer-info@pdc.kth.se before end of HPC course

** Run valgrind from R
Howto run valgrind from shell:

 =R --vanilla -d "valgrind --tool=memcheck --track-origins=yes" < ~/src/ki/microsimulation/doc/RunSim.R=

 =R --vanilla -d "valgrind --tool=callgrind" < ~/src/ki/microsimulation/doc/RunSim.R=

*** To explore and make callgrind readable:
+ https://github.com/jrfonseca/gprof2dot
  + =gprof2dot -f callgrind < callgrind.out.18739 | dot -Tpng > profile.png= plot callgrind output
  + =gprof2dot -f callgrind < callgrind.out.18503 | dot -Tpdf > profile.pdf= plot to pdf
  + =gprof2dot -z callFhcrc -f callgrind < callgrind.out.4596 | dot -Tpdf > profile.pdf= set root function
  + =gprof2dot -s -z callFhcrc -f callgrind < callgrind.out.9822 | dot -Tpdf > profile.pdf= skip arguments to functions
  + =gprof2dot -s -n 5 -e 1 -z callFhcrc -f callgrind <
    callgrind.out.7858 | dot -Tpdf > profile.pdf= restrict with threshold
+ kCachgrind


* Meetings with Erwin 20150504
** Status of the PDC project
+ old openMP with critical (where the reporting took ~70% of the time):
=mySim <- callFhcrc(n 1e7, screen "noScreening")=\\
=user  system elapsed=\\
=410.196 0.216 113.112=

+ openMP private reporting and then merging reports with one thread:
=mySim <- callFhcrc(n  1e7, screen "noScreening")=\\
=user  system elapsed=\\
=197.919 0.372 58.001=

** MPI
install.packages("/home/myusername/Rpackages/Rmpi_0.6-5.tar.gz", repos
= NULL, type = "source", lib = "/home/myusername/Rpackages/",
configure.args=c("--with-Rmpi-libpath=/usr/mpi/gcc/openmpi-1.6.3/lib64/","--with‌​-Rmpi-type=OPENMPI",
"--with-Rmpi-include=/usr/mpi/gcc/openmpi-1.6.3/include/") )

install.packages("Rmpi",
configure.args=c("--with-Rmpi-include=/afs/pdc.kth.se/pdc/vol/openmpi/1.5.4/gcc/4.6/include","--with-Rmpi-libpath=/afs/pdc.kth.se/pdc/vol/openmpi/1.5.4/gcc/4.6/lib","--with-Rmpi-type=OPENMPI")
)

R > Sys.getenv("MPI_HOME")

** Other possible improvements
+ change from static to dynamic
+ un-ordered maps to ordered
+ performance engineering (flags, compilers, chunk sizes etc)

* Mailing with Rossen
#+BEGIN_QUOTE
Hi Rossen,

Great, we have already started.

We will get back to you if we find ourselves stuck.

Best,
Andreas


*On 09/23/2014 12:43 PM, Rossen Apostolov wrote:*

Hi Andreas,

I will be your tutor/supervisor regarding your summer school project.

Let me know if you have problems with it or would like me to have a look 
at the results for evaluation.

Cheers,
Rossen
#+END_QUOTE
