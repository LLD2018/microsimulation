#+TITLE: Microsimulation package for R

#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+OPTIONS: html-postamble:nil

# Babel settings
#+PROPERTY: session *R-microsimulation-README*
# +PROPERTY: cache yes
# +PROPERTY: results output graphics
# +PROPERTY: exports both
# +PROPERTY: tangle yes
# +PROPERTY: exports both

[[http://www.gnu.org/licenses/gpl-3.0.html][http://img.shields.io/:license-gpl3-blue.svg]]
* Background
[[https://en.wikipedia.org/wiki/Microsimulation][Microsimulation]] is a form of individual-based stochastic
simulation. In continuous time, microsimulation is closely related to
[[https://en.wikipedia.org/wiki/Discrete_event_simulation][discrete event simulation]], and in discrete time it is closely related
to [[https://en.wikipedia.org/wiki/Agent-based_model][agent-based models]]. In econometrics and health care,
microsimulation is often used to model policy changes. Our
implementation is in continuous time and uses event-based discrete
event simulation for the model specification.

The package provides several approaches for microsimulation and
event-based, discrete event simulation. The package includes an R
implementation of discrete event simulation, building on several R5
classes. This implementation is useful from a pedagogical perspective,
but it is slow for larger microsimulations. For speed, we also provide
C++ classes for discrete event simulation, building on several well
established libraries, including the [[http://www.inf.usi.ch/carzaniga/ssim/index.html][SSIM]] C++ discrete event
simulation library, the [[http://www.iro.umontreal.ca/~lecuyer/myftp/streams00/][RngStream]] C library for common random numbers,
the [[http://www.boost.org/][Boost]] libraries for making many C++11 tools available to C++98,
and [[http://www.rcpp.org/][Rcpp]] for providing glue between R, R's C API and C++.

We specifically developed this package for modelling the
cost-effectiveness of cancer screening, where there are many
(e.g. 10^7) individuals who are followed from birth to death. Notably,
we provide a complete prostate cancer screening model, including tools
for cost-effectiveness analysis.
* Installing the microsimulation
+ 1 Dependencies: ::
The microsimulation requires [[http://www.rcpp.org/][Rcpp]] and [[http://www.boost.org/][Boost]]. A convenient, but not
required, way of installing github-packages in R is to use
[[https://cran.r-project.org/web/packages/devtools/README.html][devtools]]. Since both of the dependencies and [[https://cran.r-project.org/web/packages/devtools/README.html][devtools]] are available on
[[https://cran.r-project.org/][CRAN]] just run the following in R.
#+BEGIN_SRC R :exports code :eval never
  install.packages("BH")
  install.packages("Rcpp")
  install.packages("devtools")
#+END_SRC

+ 2a Installation with devtools: ::
To install the microsimulation using [[https://cran.r-project.org/web/packages/devtools/README.html][devtools]] just run the following in R:
#+BEGIN_SRC R :exports code :eval never
  require(devtools)
  install_github("mclements/microsimulation")
#+END_SRC
+ 2b Alternative installation from shell: ::
# Some thing OS-specific?
If you prefer the shell over [[https://cran.r-project.org/web/packages/devtools/README.html][devtools]], just run the following to download the
microsimulation R-package:
#+BEGIN_SRC shell :exports code :eval never
  git clone https://github.com/mclements/microsimulation.git
#+END_SRC

To install the microsimulation R-package run this in your shell:
#+BEGIN_SRC shell :exports code :eval never
  R CMD INSTALL path_to_microsimulation
#+END_SRC

* Running the simulation


** Simple examples


#+name: commentify
#+begin_src emacs-lisp :var result="" :exports none
(concat "#> "(mapconcat 'identity (split-string result "\n") "\n#> "))
#+end_src

#+BEGIN_SRC R :post commentify(*this*) :results output :exports both :eval never-export
  require(microsimulation)
  sim1 <- callSimplePerson2(n = 1e5)
  summary(sim1$events)
#+END_SRC

#+RESULTS:
: #>      state               event          age             number
: #>  Healthy:338   toOtherDeath :142   Min.   :  1.00   Min.   :   1.0
: #>  Cancer :  0   toCancer     :100   1st Qu.: 37.00   1st Qu.:  74.0
: #>  Death  :  0   toCancerDeath: 96   Median : 58.00   Median : 325.0
: #>                                    Mean   : 56.98   Mean   : 445.1
: #>                                    3rd Qu.: 79.00   3rd Qu.: 721.8
: #>                                    Max.   :100.00   Max.   :1722.0
: #>

#+BEGIN_SRC R :post commentify(*this*) :results output :exports both :eval never-export
  sim2 <- callIllnessDeath(n = 1e5, cure = 0.2)
  summary(sim2$prev)
#+END_SRC

#+RESULTS:
: #>      state          age             number
: #>  Healthy:200   Min.   :  0.00   Min.   :     1
: #>  Cancer :  0   1st Qu.: 25.75   1st Qu.:  2030
: #>                Median : 50.50   Median :  8096
: #>                Mean   : 50.49   Mean   : 34914
: #>                3rd Qu.: 75.25   3rd Qu.: 79029
: #>                Max.   :100.00   Max.   :100000
: #>

** Extensive use case
For more advance use of the microsimulation frame work please have a
look at our prostate cancer natural history model:

[[https://github.com/mclements/prostata]]

# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
